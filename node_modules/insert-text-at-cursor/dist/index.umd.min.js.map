{"version":3,"file":"index.umd.min.js","sources":["../index.js"],"sourcesContent":["let browserSupportsTextareaTextNodes;\r\n\r\n/**\r\n * @param {HTMLElement} input\r\n * @return {boolean}\r\n */\r\nfunction canManipulateViaTextNodes(input) {\r\n  if (input.nodeName !== \"TEXTAREA\") {\r\n    return false;\r\n  }\r\n  if (typeof browserSupportsTextareaTextNodes === \"undefined\") {\r\n    const textarea = document.createElement(\"textarea\");\r\n    textarea.value = 1;\r\n    browserSupportsTextareaTextNodes = !!textarea.firstChild;\r\n  }\r\n  return browserSupportsTextareaTextNodes;\r\n}\r\n\r\n/**\r\n * @param {HTMLTextAreaElement|HTMLInputElement} input\r\n * @param {string} text\r\n * @returns {void}\r\n */\r\nexport default function(input, text) {\r\n  // Most of the used APIs only work with the field selected\r\n  input.focus();\r\n\r\n  // IE 8-10\r\n  if (document.selection) {\r\n    const ieRange = document.selection.createRange();\r\n    ieRange.text = text;\r\n\r\n    // Move cursor after the inserted text\r\n    ieRange.collapse(false /* to the end */);\r\n    ieRange.select();\r\n\r\n    return;\r\n  }\r\n\r\n  // Webkit + Edge\r\n  const isSuccess = document.execCommand(\"insertText\", false, text);\r\n  if (!isSuccess) {\r\n    const start = input.selectionStart;\r\n    const end = input.selectionEnd;\r\n    // Firefox (non-standard method)\r\n    if (typeof input.setRangeText === \"function\") {\r\n      input.setRangeText(text);\r\n    } else {\r\n      if (canManipulateViaTextNodes(input)) {\r\n        const textNode = document.createTextNode(text);\r\n        let node = input.firstChild;\r\n\r\n        // If textarea is empty, just insert the text\r\n        if (!node) {\r\n          input.appendChild(textNode);\r\n        } else {\r\n          // Otherwise we need to find a nodes for start and end\r\n          let offset = 0;\r\n          let startNode = null;\r\n          let endNode = null;\r\n\r\n          // To make a change we just need a Range, not a Selection\r\n          const range = document.createRange();\r\n\r\n          while (node && (startNode === null || endNode === null)) {\r\n            const nodeLength = node.nodeValue.length;\r\n\r\n            // if start of the selection falls into current node\r\n            if (start >= offset && start <= offset + nodeLength) {\r\n              range.setStart((startNode = node), start - offset);\r\n            }\r\n\r\n            // if end of the selection falls into current node\r\n            if (end >= offset && end <= offset + nodeLength) {\r\n              range.setEnd((endNode = node), end - offset);\r\n            }\r\n\r\n            offset += nodeLength;\r\n            node = node.nextSibling;\r\n          }\r\n\r\n          // If there is some text selected, remove it as we should replace it\r\n          if (start !== end) {\r\n            range.deleteContents();\r\n          }\r\n\r\n          // Finally insert a new node. The browser will automatically\r\n          // split start and end nodes into two if necessary\r\n          range.insertNode(textNode);\r\n        }\r\n      } else {\r\n        // For the text input the only way is to replace the whole value :(\r\n        const value = input.value;\r\n        input.value = value.slice(0, start) + text + value.slice(end);\r\n      }\r\n    }\r\n\r\n    // Correct the cursor position to be at the end of the insertion\r\n    input.setSelectionRange(start + text.length, start + text.length);\r\n\r\n    // Notify any possible listeners of the change\r\n    const e = document.createEvent(\"UIEvent\");\r\n    e.initEvent(\"input\", true, false);\r\n    input.dispatchEvent(e);\r\n  }\r\n}\r\n"],"names":["browserSupportsTextareaTextNodes","input","text","focus","document","selection","ieRange","createRange","collapse","select","execCommand","start","selectionStart","end","selectionEnd","setRangeText","nodeName","textarea","createElement","value","firstChild","canManipulateViaTextNodes","textNode","createTextNode","node","offset","startNode","endNode","range","nodeLength","nodeValue","length","setStart","setEnd","nextSibling","deleteContents","insertNode","appendChild","slice","setSelectionRange","e","createEvent","initEvent","dispatchEvent"],"mappings":"8LAAA,IAAIA,gBAuBJ,SAAwBC,EAAOC,QAEvBC,QAGFC,SAASC,UAAW,KAChBC,EAAUF,SAASC,UAAUE,uBAC3BL,KAAOA,IAGPM,UAAS,UACTC,aAMQL,SAASM,YAAY,cAAc,EAAOR,GAC5C,KACRS,EAAQV,EAAMW,eACdC,EAAMZ,EAAMa,gBAEgB,mBAAvBb,EAAMc,eACTA,aAAab,WAxCzB,SAAmCD,MACV,aAAnBA,EAAMe,gBACD,UAEuC,IAArChB,EAAkD,KACrDiB,EAAWb,SAASc,cAAc,cAC/BC,MAAQ,MACoBF,EAASG,kBAEzCpB,EAiCCqB,CAA0BpB,GAAQ,KAC9BqB,EAAWlB,SAASmB,eAAerB,GACrCsB,EAAOvB,EAAMmB,cAGZI,EAEE,SAEDC,EAAS,EACTC,EAAY,KACZC,EAAU,KAGRC,EAAQxB,SAASG,cAEhBiB,IAAuB,OAAdE,GAAkC,OAAZC,IAAmB,KACjDE,EAAaL,EAAKM,UAAUC,OAG9BpB,GAASc,GAAUd,GAASc,EAASI,KACjCG,SAAUN,EAAYF,EAAOb,EAAQc,GAIzCZ,GAAOY,GAAUZ,GAAOY,EAASI,KAC7BI,OAAQN,EAAUH,EAAOX,EAAMY,MAG7BI,IACHL,EAAKU,YAIVvB,IAAUE,KACNsB,mBAKFC,WAAWd,UAlCXe,YAAYf,OAoCf,KAECH,EAAQlB,EAAMkB,QACdA,MAAQA,EAAMmB,MAAM,EAAG3B,GAAST,EAAOiB,EAAMmB,MAAMzB,KAKvD0B,kBAAkB5B,EAAQT,EAAK6B,OAAQpB,EAAQT,EAAK6B,YAGpDS,EAAIpC,SAASqC,YAAY,aAC7BC,UAAU,SAAS,GAAM,KACrBC,cAAcH"}